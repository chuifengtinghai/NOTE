第一天：

软件包方式管理程序
vim --version      查看vim版本
make clean         安装之前可先清除
make               编译程序
make install       安装程序
make uninstall     卸载程序

apt工具
apt-get update          从网上的源更新
apt-get upgrade         自动升级软件包
apt-get check           检测当前apt管理里面的依赖包情况
apt-get -f install      修复依赖包关系
apt-get install         安装
apt-get install -d      只下载
apt-get remove          卸载（不干净）
apt-get remove --purge  完全卸载

apt-cache show          显示软件包信息
apt-cache policy        显示软件包安装状态
apt-cache depends       显示软件包依赖关系
apt-cache search        在source中查询某个名称的软件包
apt-cache search ncurses*

apt-get install 工作步骤：
1、扫描本地软件包列表
2、进行软件包依赖关系检查
3、从软件包指定的apt源中下载软件包
4、解压软件包，并且完成安装和配置

apt工具的常用目录
/etc/apt/sources.list
/var/lib/apt/lists/*
/var/cache/apt/archives/

whereis vim  查找vim所在的位置

第二天：

FTP工具：
ftp oss.sgi.com  连接ftp服务器
dir          列出服务器目录
cd           改变服务器上的目录
lcd          改变本地目录
ascii        使用文本方式传输文件
binary       使用二进制方式传输文件
bye	     退出FTP工具
hash         显示文件传输进度
get          从服务器下载文件
put          上传文件到服务器
！           切换到shell对话框，在shell中使用exit命令可以退回FTP对话框

第三天：
系统环境变量及操作：
export 查看当前用户的环境变量
PATH变量
export PATH=./:$PATH
echo $PATH
getenv()获取环境变量
putenv(),setenv()设置环境变量
putenv("LANG=en_US")
setenv("LANG","zh_CN.GB2312",0)
echo $LANG

创建进程：
创建进程函数：fork()
pid_t
perror()
exit()
getpid();
ps -e
sleep(20);
进程间通信：
waitpid()
1、管道
2、有名管道
3、FIFO文件
4、共享内存
pipe()
wait()
close()
write()
线程：
pthread_create()
pthread_cancel()
pthread_join()

第四天：

Linux服务器程序的安装及配置：

linux操作系统运行级别：

0系统停机模式 1单用户模式 2多用户模式 3完整的多用户文本模式 4系统保留 5图形化模式 6重启模式

runlevel 显示当前运行级别
init level 进入其它运行级别

init守护进程启动：
/sbin/init /sbin/telinit /sbin/getty
/etc/init/rc-sysinit.conf
[initab]
/etc/init.d/rcS
/etc/init.d/rc
/etc/rcN.d
/etc/init.d/rc.local

chkconfig工具
chkconfig --list
chkconfig --level N

./ssh status
./ssh stop
./ssh start
./ssh restart
service 进一步封装
service ssh start

file rcS  查看文件属性
ps -ef    显示进程

第七天：GNU开发环境基础
GCC GNU C Complifer 交叉编译器，特别适用于不同平台的嵌入式开发
GCC程序编译过程
.C源代码----预处理----.i预编译文件----编译----.s汇编源文件----汇编----.o目标文件----链接----可执行文件
GCC支持的后缀名
.c C原始程序
.C c++原始程序
.m ObjectC原始程序
man gcc 帮助文档，可查看文件后缀名
常用参数：
编译过程参数
-c   只编译不链接
-S   只编译不汇编
-E   只预编译
-g   包含调试信息  
-o file  指定目标输出文件
-I[dir]  搜索头文件路径
库选项
静态链接库 .a 
动态链接库 .so 
-static   静态编译
-shared   动态编译
-L dir 库文件搜索中添加路径
-fPIC  与位置无关的目标代码 
警告选项
优化
gcc -E hellosundy.c -o hellosundy.i
gcc -S hellosundy.i -o hellosundy.S
gcc -c hellosundy.S -o hellosundy.o 
file hellosundy.o 
gcc hellosundy.o -o hellosundy
gcc -g hellosundy.c -o hellosundy2
gcc -I. hello.c  -o hello
gcc -static hello.c -o hello2
编译静态链接库
1、生成目标文件.o
2、ar crv[*.a]
gcc -c countlib.c
ar crv countlib.a countlib.o 
gcc -o count count.c -L./ countlib.a 调用静态链接库
编译动态链接库
1、生成位置无关目标代码 gcc -fPIC -c [*.c]
2、gcc -shared -o [*.so]
3、gcc -o [file] [file.c] -L [file.so]
gcc -fPIC -c countlib.c
gcc -shared countlib.o -o countlib.so
gcc count.c -o count2 -L./ countlib.so
警告选项
-w 关闭所有警告
-Wall 发出gcc提供的所有有用的警告
-pedantic  发出ansi c的所有警告
gcc -Wall hello.c -o hello
优化选项
-Olevel 优化等级
第八天：gcc编译
下载源码：
gcc gmp mpfr mpc
编译：
tar -xvjf gcc-4.7.1-tar.bz2
./config
m4 多处理器类库
gmp GNU的多精度数字运算类库
mpfr 多精度浮点运算的C类 
./configure gmp
make
sudo make install
 

















































