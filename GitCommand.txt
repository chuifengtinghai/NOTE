Git的常用命令及操作
一、配置git 用户的名字和email地址：
	git config --global user.name "lvfeng"
	git config --global user.email "lvfeng_1988@126.com"	
	注意：只有配置了用户名和email地址才能够向仓库提交更改，注意命令中的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
	git config --list  查看用户的配置GIT 

二、创建本地版本库
	1、git init                                      在本地初始化一个空的git仓库
    2、git status                                    检测文件状态
	3、git add files  "."未提交文件，"*"所有文件     预先添加将要向仓库提交的文件
	4、git commit -m "文件更改说明（版本说明）"      文件在仓库登记并备注说明

三、版本回退
	1、git log       穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
		git log --pretty=oneline                   去掉多余的显示
		git log --graph --pretty=format:"%h  %s"   图形化显示
	2、git reset --hard HEAD^      回到上一个版本
	   HEAD 代表当前版本 HEAD^ 代表上一个版本 HEAD^^代表上上个版本
	   git reset --hard xxxxx      xxxxx代表想要回到的版本的ID号
	3、git reflog     要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本
	4、git reset --soft 版本号    将版本库恢复到暂存区

四、查看修改的内容
	 git diff GitCommand.txt            如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
   	 git diff HEAD -- GitCommand.txt    查看工作区和版本库里面最新版本的区别：
	
五、撤销修改
	1、git checkout -f 文件       丢弃工作区的修改
		这里有两种情况：
		一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态
		一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态
	2、git reset HEAD 文件         把暂存区的修改撤销掉，重新放回工作区

六、删除文件
	1、确实要从版本库中删除该文件
		git rm 文件            删掉文件并git commit 
	2、删错了，想要恢复
		git checkout -- 文件   git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
		确保是在工作区进行该操作，如果已经提交到暂存区，需要退回到工作区。

七、本地版本库添加到远程版本库
	1、创建SSH Key
		输入ssh-keygen -t rsa -C "lvfeng@sjzthdz.com"指令后，一路回车，使用默认值即可,成功后会生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件。
		登录git服务器，将id_rsa.pub文件内的内容添加到个人账号的SSH Key下。
	2、查看远程库版本库信息
		git remote 查看是否有远程版本库的信息，如需详细信息可添加参数-v
		若本地版本库已关联到远程版本库，会显示远程版本库名称，若无回复，说明本地版本库未关联到远程版本库。
	3、若无远程版本库，将本地版本库关联到远程版本库
		在git服务器上创建一个版本库，以便本地版本库与之关联。
		git remote add origin git@192.168.8.150:lvfeng/learngit.git 关联后，远程版本库的名字就是origin，可以改成其他的。
		git remote remove origin     取消本地目录下关联的远程库
	4、将本地版本库推送到远程版本库
		git push -u origin master 将本地版本库内的master分支推送到远程版本库，第一次推送加上参数-u，把本地的master分支和远程的master分支关联
		git push origin master    关联后可简化为该指令
   	5、从远程库克隆到本地：
		git clone git@192.168.8.150:lvfeng/learngit.git
        git clone https://github.com/chuifengtinghai/NOTE.git
		当更换电脑或工作目录后，可将远程库克隆到本地 ，克隆成功后会在当前目录生成learngit目录。
	6、拉取代码
		git pull origin dev
		等价于
		git fetch origin dev
		git merge origin/dev

八、分支管理
	1、创建并切换分支
		git checkout -b dev     -b参数表示创建并切换
		git branch dev             创建分支
		git checkout dev          切换分支
	2、查看分支
		git branch                查看当前分支
	3、删除分支
		git branch -d dev              删除本地分支
		git push origin -- delete dev  删除远程版本库分支
		
九、分支合并
	1、快速合并
		git merge dev        将dev分支合并到当前分支
	2、普通合并
		git merge --no-ff -m "合并说明" dev
		用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并
		
十、Bug分支
	1、当前工作现场“储藏”起来，以便切换分支，否则可能不能切换
		git stash
	2、切换到master分支，并创建bug分支
		git checkout master
		git checkout -b issue-101
	3、在bug分支下工作并提交修改
	4、切换到master分支，并合并
		git checkout master
		git merge --no-ff -m "merged bug fix 101"
	5、删除bug分支
	6、查看是否有工作现场被保存
		git stash list
	7、恢复现场
		git stash pop    恢复的同时把stash内容也删了，相当于下面两步
		git stash apply
		git stash drop
		
十一、Feature分支
	开发一个新feature，最好新建一个分支，如果要丢弃一个没有被合并过的分支，可以通过git branch -D <Branch name>强行删除

十二、rebase 简化提交版本记录
	1、场景一：合并每天的流水账式版本，汇总成节点

	2、场景二 ：减少由于其它分支导致的主分支分叉过多
		切换到dev分支：git rebase master  将master 绕道到dev上，相当于master dev在同一个分叉下了，不再用原来的maste干线了。
		切换到master分支：git merge dev   返回master
	3、场景三：
		git fetch origin dev
		git rebase origin/dev
        冲突解决后继续：git rebase --continue
		
十三、快速解决冲突，Beyond compare工具
	git中配置：
	git config --local merge.tool.bc3
	git config --local mergetool.path '/usr/local/bin/bcomp'
	git config --local mergetool.keepBackup false
	git中应用：
	git mergetool
	解决推送冲突：
	先用git pull把最新的提交从origin/dev拉下来，然后，在本地合并，解决冲突，再推送

十四、标签
	1、命令git tag <name>就可以打一个新标签 git tag v1.0
	2、命令git tag查看所有标签
	3、对特定某个版本打标签
		git tag v0.9 commit-id  默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
		方法是找到历史提交的commit id，然后打上就可以了
	4、查看标签信息
		git show <tagname>
	5、创建带有说明的标签，用-a指定标签名，-m指定说明文字
		git tag -a v0.1 -m "version 0.1 released" commit-id
	6、删除本地标签
		git tag -d v0.1
	7、推送本地标签到远程
		git push origin <tagname>  可以推送一个本地标签
		git push origin --tags     可以推送全部未推送过的本地标签
	8、删除远程标签
		首先删除本地标签，然后从远程删除
		git push origin :refs/tags/<tagname>

十五、多人协作，合同开发
	1、建立组织，同一组织内可以创建多个项目
	2、创建第一版并打上标签（master分支）
	3、创建并切换到dev分支，将dev分支推送到远程版本库
	4、邀请成员进组织
	5、从远程库克隆并创建自己的分支
		git clone git@192.168.8.150:lvfeng/learngit.git
		从远程库clone，默认情况下只能看到本地的master分支，可以用git branch命令看看
		git checkout -b dev origin/dev    切换到dev分支
		git checkout -b feature1          自己的功能分支
	6、推送自己的功能分支
		git push origin 分支名            推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上
	7、解决推送冲突
	8、代码review
		pull request    merge request 在github上配置
	9、建立本地分支和远程分支的关联：
		如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name